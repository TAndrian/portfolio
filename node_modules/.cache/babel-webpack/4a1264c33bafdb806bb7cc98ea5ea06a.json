{"ast":null,"code":"import { Component, Inject, PLATFORM_ID, HostListener, Directive, ElementRef, HostBinding, Input, NgModule } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { __awaiter } from 'tslib';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/dialog';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/material/button';\nimport * as ɵngcc4 from '@angular/material/icon';\nimport * as ɵngcc5 from '@angular/material/progress-spinner';\n\nfunction ImageViewerComponent_figure_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"figure\");\n    ɵngcc0.ɵɵelement(1, \"img\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", (ctx_r0.calculatedImageDimension == null ? null : ctx_r0.calculatedImageDimension.width) + \"px\")(\"height\", (ctx_r0.calculatedImageDimension == null ? null : ctx_r0.calculatedImageDimension.height) + \"px\");\n    ɵngcc0.ɵɵproperty(\"src\", ctx_r0.src, ɵngcc0.ɵɵsanitizeUrl)(\"alt\", ctx_r0.alt);\n  }\n}\n\nfunction ImageViewerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 5);\n    ɵngcc0.ɵɵelementStart(2, \"mat-icon\");\n    ɵngcc0.ɵɵtext(3, \"close\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ImageViewerComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵelement(1, \"mat-spinner\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nclass ImageDimension {\n  constructor(width = 0, height = 0) {\n    this.height = height;\n    this.width = width;\n  }\n\n}\n\nlet ImageViewerComponent = /*#__PURE__*/(() => {\n  class ImageViewerComponent {\n    constructor(_nativeDocument, _data, _platformId, _dialogRef) {\n      this._nativeDocument = _nativeDocument;\n      this._data = _data;\n      this._platformId = _platformId;\n      this._dialogRef = _dialogRef;\n      this._unsubscribeAll = new Subject();\n      this._document = this._nativeDocument;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this._originalImageDimension = yield this.getOriginalImageDimension(this._data.src);\n        this.setImageDimension();\n        this.src = this._data.src;\n        this.alt = this._data.alt;\n        this.imageLoaded = true; // hide the close button before dialog close\n        // Otherwise it apears inside image\n\n        this._dialogRef.beforeClosed().pipe(takeUntil(this._unsubscribeAll)).subscribe(res => {\n          this.hideCloseBtn = true;\n        });\n      });\n    }\n\n    setImageDimension() {\n      if (!isPlatformBrowser(this._platformId)) {\n        return;\n      }\n\n      const windowDimension = new ImageDimension(this.percentage(this._document.body.clientWidth, 90), this.percentage(this._document.body.clientHeight, 90));\n      this.calculatedImageDimension = this.calculateAspectRatioFit(this._originalImageDimension, windowDimension);\n    }\n\n    calculateAspectRatioFit(srcDimension, maxDimension) {\n      if (srcDimension.height <= maxDimension.height && srcDimension.width <= maxDimension.width) {\n        return srcDimension;\n      }\n\n      const ratio = Math.min(maxDimension.width / srcDimension.width, maxDimension.height / srcDimension.height);\n      return new ImageDimension(srcDimension.width * ratio, srcDimension.height * ratio);\n    }\n\n    getOriginalImageDimension(imageUrl) {\n      if (!imageUrl) {\n        return;\n      }\n\n      return new Promise(res => {\n        const img = new Image();\n\n        img.onload = event => {\n          const loadedImage = event.currentTarget;\n          const dimension = new ImageDimension(loadedImage.width, loadedImage.height);\n          return res(dimension);\n        };\n\n        img.src = imageUrl;\n      });\n    }\n\n    percentage(total, percent) {\n      return percent / 100 * total;\n    }\n\n    ngOnDestroy() {\n      this._unsubscribeAll.next();\n\n      this._unsubscribeAll.complete();\n    }\n\n  }\n\n  ImageViewerComponent.ɵfac = function ImageViewerComponent_Factory(t) {\n    return new (t || ImageViewerComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialogRef));\n  };\n\n  ImageViewerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ImageViewerComponent,\n    selectors: [[\"lib-image-viewer\"]],\n    hostBindings: function ImageViewerComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function ImageViewerComponent_resize_HostBindingHandler($event) {\n          return ctx.setImageDimension($event);\n        }, false, ɵngcc0.ɵɵresolveWindow);\n      }\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"class\", \"image-view-close-button\", 4, \"ngIf\"], [\"loaderTemplate\", \"\"], [3, \"src\", \"alt\"], [1, \"image-view-close-button\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\"], [1, \"img-loading-spinner-container\"]],\n    template: function ImageViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ImageViewerComponent_figure_0_Template, 2, 6, \"figure\", 0);\n        ɵngcc0.ɵɵtemplate(1, ImageViewerComponent_div_1_Template, 4, 0, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(2, ImageViewerComponent_ng_template_2_Template, 2, 0, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r2 = ɵngcc0.ɵɵreference(3);\n\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.imageLoaded)(\"ngIfElse\", _r2);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hideCloseBtn);\n      }\n    },\n    directives: [ɵngcc2.NgIf, ɵngcc3.MatButton, ɵngcc1.MatDialogClose, ɵngcc4.MatIcon, ɵngcc5.MatSpinner],\n    styles: [\"figure[_ngcontent-%COMP%]{margin:0;min-height:72px;min-width:72px;padding:0}.img-loading-spinner-container[_ngcontent-%COMP%]{align-items:center;display:flex;height:150px;justify-content:center;width:150px}.image-view-close-button[_ngcontent-%COMP%]{animation:fade-in .2s linear both;animation-delay:.2s;cursor:pointer;position:fixed!important;right:-100px;top:-100px}.image-view-close-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:rgba(0,0,0,.4);color:#fff;height:72px;width:72px}@keyframes fade-in{0%{right:-100px;top:-100px}to{right:-20px;top:-20px}}  .ng-hacks-image-viewer{max-width:none!important}  .ng-hacks-image-viewer .mat-dialog-container{background:transparent;border-radius:0;box-shadow:none;overflow:hidden;padding:0}  .ng-hacks-image-viewer-backdrop{background:rgba(0,0,0,.32);cursor:zoom-out}\"]\n  });\n  return ImageViewerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ImageViewerDirective = /*#__PURE__*/(() => {\n  class ImageViewerDirective {\n    constructor(_elRef, _dialog) {\n      this._elRef = _elRef;\n      this._dialog = _dialog;\n\n      if (this._elRef.nativeElement.tagName === 'IMG') {\n        this._cursor = 'zoom-in';\n      }\n    }\n    /**\r\n     * @description Disables image viewer\r\n     */\n\n\n    set disabled(v) {\n      this._disabled = v;\n\n      if (v) {\n        this._cursor = 'initial';\n      }\n    }\n\n    set customSrc(v) {\n      if (!v) {\n        return;\n      }\n\n      this._customSrc = v;\n    }\n\n    viewImage() {\n      if (this._disabled) {\n        return;\n      }\n\n      this._dialog.open(ImageViewerComponent, {\n        autoFocus: false,\n        data: {\n          src: this._customSrc || this.src,\n          alt: this.alt\n        },\n        panelClass: 'ng-hacks-image-viewer',\n        backdropClass: 'ng-hacks-image-viewer-backdrop'\n      });\n    }\n\n  }\n\n  ImageViewerDirective.ɵfac = function ImageViewerDirective_Factory(t) {\n    return new (t || ImageViewerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialog));\n  };\n\n  ImageViewerDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ImageViewerDirective,\n    selectors: [[\"\", \"imageViewer\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ImageViewerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ImageViewerDirective_click_HostBindingHandler() {\n          return ctx.viewImage();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"cursor\", ctx._cursor);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      customSrc: [\"imageViewer\", \"customSrc\"],\n      src: \"src\",\n      alt: \"alt\"\n    }\n  });\n  return ImageViewerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ImageViewerModule = /*#__PURE__*/(() => {\n  class ImageViewerModule {}\n\n  ImageViewerModule.ɵfac = function ImageViewerModule_Factory(t) {\n    return new (t || ImageViewerModule)();\n  };\n\n  ImageViewerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ImageViewerModule\n  });\n  ImageViewerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, MatDialogModule, MatProgressSpinnerModule, MatButtonModule, MatIconModule]]\n  });\n  return ImageViewerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageViewerModule, {\n    declarations: function () {\n      return [ImageViewerComponent, ImageViewerDirective];\n    },\n    imports: function () {\n      return [CommonModule, MatDialogModule, MatProgressSpinnerModule, MatButtonModule, MatIconModule];\n    },\n    exports: function () {\n      return [ImageViewerDirective];\n    }\n  });\n})();\n/*\r\n * Public API Surface of image-viewer\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ImageViewerDirective, ImageViewerModule, ImageViewerComponent as ɵa }; //# sourceMappingURL=nghacks-image-viewer.js.map","map":null,"metadata":{},"sourceType":"module"}