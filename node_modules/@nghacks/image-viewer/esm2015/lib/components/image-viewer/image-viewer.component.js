import { __awaiter } from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Component, HostListener, Inject, PLATFORM_ID } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
export class ImageDimension {
    constructor(width = 0, height = 0) {
        this.height = height;
        this.width = width;
    }
}
export class ImageViewerComponent {
    constructor(_nativeDocument, _data, _platformId, _dialogRef) {
        this._nativeDocument = _nativeDocument;
        this._data = _data;
        this._platformId = _platformId;
        this._dialogRef = _dialogRef;
        this._unsubscribeAll = new Subject();
        this._document = this._nativeDocument;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this._originalImageDimension = yield this.getOriginalImageDimension(this._data.src);
            this.setImageDimension();
            this.src = this._data.src;
            this.alt = this._data.alt;
            this.imageLoaded = true;
            // hide the close button before dialog close
            // Otherwise it apears inside image
            this._dialogRef.beforeClosed()
                .pipe(takeUntil(this._unsubscribeAll))
                .subscribe(res => {
                this.hideCloseBtn = true;
            });
        });
    }
    setImageDimension() {
        if (!isPlatformBrowser(this._platformId)) {
            return;
        }
        const windowDimension = new ImageDimension(this.percentage(this._document.body.clientWidth, 90), this.percentage(this._document.body.clientHeight, 90));
        this.calculatedImageDimension = this.calculateAspectRatioFit(this._originalImageDimension, windowDimension);
    }
    calculateAspectRatioFit(srcDimension, maxDimension) {
        if (srcDimension.height <= maxDimension.height && srcDimension.width <= maxDimension.width) {
            return srcDimension;
        }
        const ratio = Math.min(maxDimension.width / srcDimension.width, maxDimension.height / srcDimension.height);
        return new ImageDimension(srcDimension.width * ratio, srcDimension.height * ratio);
    }
    getOriginalImageDimension(imageUrl) {
        if (!imageUrl) {
            return;
        }
        return new Promise(res => {
            const img = new Image();
            img.onload = (event) => {
                const loadedImage = event.currentTarget;
                const dimension = new ImageDimension(loadedImage.width, loadedImage.height);
                return res(dimension);
            };
            img.src = imageUrl;
        });
    }
    percentage(total, percent) {
        return ((percent / 100) * total);
    }
    ngOnDestroy() {
        this._unsubscribeAll.next();
        this._unsubscribeAll.complete();
    }
}
ImageViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-image-viewer',
                template: "<figure *ngIf=\"imageLoaded; else loaderTemplate\">\n\n  <img\n    [src]=\"src\"\n    [alt]=\"alt\"\n    [style.width]=\"calculatedImageDimension?.width+'px'\"\n    [style.height]=\"calculatedImageDimension?.height+'px'\"\n  >\n</figure>\n\n<div class=\"image-view-close-button\" *ngIf=\"!hideCloseBtn\">\n  <button mat-icon-button mat-dialog-close>\n    <mat-icon>close</mat-icon>\n  </button>\n</div>\n\n\n<ng-template #loaderTemplate>\n  <div class=\"img-loading-spinner-container\">\n    <mat-spinner></mat-spinner>\n  </div>\n</ng-template>\n\n\n",
                styles: ["figure{margin:0;min-height:72px;min-width:72px;padding:0}.img-loading-spinner-container{align-items:center;display:flex;height:150px;justify-content:center;width:150px}.image-view-close-button{animation:fade-in .2s linear both;animation-delay:.2s;cursor:pointer;position:fixed!important;right:-100px;top:-100px}.image-view-close-button button{background-color:rgba(0,0,0,.4);color:#fff;height:72px;width:72px}@keyframes fade-in{0%{right:-100px;top:-100px}to{right:-20px;top:-20px}}::ng-deep .ng-hacks-image-viewer{max-width:none!important}::ng-deep .ng-hacks-image-viewer .mat-dialog-container{background:transparent;border-radius:0;box-shadow:none;overflow:hidden;padding:0}::ng-deep .ng-hacks-image-viewer-backdrop{background:rgba(0,0,0,.32);cursor:zoom-out}"]
            },] }
];
ImageViewerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: MatDialogRef }
];
ImageViewerComponent.propDecorators = {
    setImageDimension: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,