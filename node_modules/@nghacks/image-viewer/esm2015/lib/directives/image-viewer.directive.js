import { Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ImageViewerComponent } from '../components/image-viewer/image-viewer.component';
export class ImageViewerDirective {
    constructor(_elRef, _dialog) {
        this._elRef = _elRef;
        this._dialog = _dialog;
        if (this._elRef.nativeElement.tagName === 'IMG') {
            this._cursor = 'zoom-in';
        }
    }
    /**
     * @description Disables image viewer
     */
    set disabled(v) {
        this._disabled = v;
        if (v) {
            this._cursor = 'initial';
        }
    }
    set customSrc(v) {
        if (!v) {
            return;
        }
        this._customSrc = v;
    }
    viewImage() {
        if (this._disabled) {
            return;
        }
        this._dialog.open(ImageViewerComponent, {
            autoFocus: false,
            data: {
                src: this._customSrc || this.src,
                alt: this.alt
            },
            panelClass: 'ng-hacks-image-viewer',
            backdropClass: 'ng-hacks-image-viewer-backdrop'
        });
    }
}
ImageViewerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[imageViewer]'
            },] }
];
ImageViewerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MatDialog }
];
ImageViewerDirective.propDecorators = {
    _cursor: [{ type: HostBinding, args: ['style.cursor',] }],
    src: [{ type: Input }],
    alt: [{ type: Input }],
    disabled: [{ type: Input, args: ['disabled',] }],
    customSrc: [{ type: Input, args: ['imageViewer',] }],
    viewImage: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utdmlld2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2ltYWdlLXZpZXdlci9zcmMvbGliL2RpcmVjdGl2ZXMvaW1hZ2Utdmlld2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFLekYsTUFBTSxPQUFPLG9CQUFvQjtJQW1DL0IsWUFDVSxNQUFrQixFQUNsQixPQUFrQjtRQURsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLFlBQU8sR0FBUCxPQUFPLENBQVc7UUFFMUIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQTFCRDs7T0FFRztJQUNILElBQ1csUUFBUSxDQUFDLENBQVU7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEVBQUU7WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFJRCxJQUNXLFNBQVMsQ0FBQyxDQUFTO1FBQzVCLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQWFNLFNBQVM7UUFFZCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2Ysb0JBQW9CLEVBQ3BCO1lBQ0UsU0FBUyxFQUFFLEtBQUs7WUFDaEIsSUFBSSxFQUFFO2dCQUNKLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxHQUFHO2dCQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7YUFDZDtZQUNELFVBQVUsRUFBRSx1QkFBdUI7WUFDbkMsYUFBYSxFQUFFLGdDQUFnQztTQUNoRCxDQUNGLENBQUM7SUFDSixDQUFDOzs7WUFqRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCOzs7WUFObUIsVUFBVTtZQUNyQixTQUFTOzs7c0JBUWYsV0FBVyxTQUFDLGNBQWM7a0JBSzFCLEtBQUs7a0JBS0wsS0FBSzt1QkFPTCxLQUFLLFNBQUMsVUFBVTt3QkFVaEIsS0FBSyxTQUFDLGFBQWE7d0JBZ0JuQixZQUFZLFNBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBJbWFnZVZpZXdlckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvaW1hZ2Utdmlld2VyL2ltYWdlLXZpZXdlci5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbaW1hZ2VWaWV3ZXJdJ1xufSlcbmV4cG9ydCBjbGFzcyBJbWFnZVZpZXdlckRpcmVjdGl2ZSB7XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5jdXJzb3InKSBwcml2YXRlIF9jdXJzb3I7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBJbWFnZSBzb3VyY2UgVVJMXG4gICAqL1xuICBASW5wdXQoKSBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIEFsbmVybmF0ZSB0ZXh0IGZvciBpbWFnZVxuICAgKi9cbiAgQElucHV0KCkgYWx0OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBEaXNhYmxlcyBpbWFnZSB2aWV3ZXJcbiAgICovXG4gIEBJbnB1dCgnZGlzYWJsZWQnKVxuICBwdWJsaWMgc2V0IGRpc2FibGVkKHY6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IHY7XG4gICAgaWYgKHYpIHtcbiAgICAgIHRoaXMuX2N1cnNvciA9ICdpbml0aWFsJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jdXN0b21TcmM6IHN0cmluZztcblxuICBASW5wdXQoJ2ltYWdlVmlld2VyJylcbiAgcHVibGljIHNldCBjdXN0b21TcmModjogc3RyaW5nKSB7XG4gICAgaWYgKCF2KSB7IHJldHVybjsgfVxuICAgIHRoaXMuX2N1c3RvbVNyYyA9IHY7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIF9kaWFsb2c6IE1hdERpYWxvZ1xuICApIHtcbiAgICBpZiAodGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudC50YWdOYW1lID09PSAnSU1HJykge1xuICAgICAgdGhpcy5fY3Vyc29yID0gJ3pvb20taW4nO1xuICAgIH1cbiAgfVxuXG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBwdWJsaWMgdmlld0ltYWdlKCk6IHZvaWQge1xuXG4gICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgdGhpcy5fZGlhbG9nLm9wZW4oXG4gICAgICBJbWFnZVZpZXdlckNvbXBvbmVudCxcbiAgICAgIHtcbiAgICAgICAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHNyYzogdGhpcy5fY3VzdG9tU3JjIHx8IHRoaXMuc3JjLFxuICAgICAgICAgIGFsdDogdGhpcy5hbHRcbiAgICAgICAgfSxcbiAgICAgICAgcGFuZWxDbGFzczogJ25nLWhhY2tzLWltYWdlLXZpZXdlcicsXG4gICAgICAgIGJhY2tkcm9wQ2xhc3M6ICduZy1oYWNrcy1pbWFnZS12aWV3ZXItYmFja2Ryb3AnXG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG5cbn1cbiJdfQ==