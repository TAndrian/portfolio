import { Component, Inject, PLATFORM_ID, HostListener, Directive, ElementRef, HostBinding, Input, NgModule } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { __awaiter } from 'tslib';
import { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/dialog';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/button';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from '@angular/material/progress-spinner';

function ImageViewerComponent_figure_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "figure");
    ɵngcc0.ɵɵelement(1, "img", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("width", (ctx_r0.calculatedImageDimension == null ? null : ctx_r0.calculatedImageDimension.width) + "px")("height", (ctx_r0.calculatedImageDimension == null ? null : ctx_r0.calculatedImageDimension.height) + "px");
    ɵngcc0.ɵɵproperty("src", ctx_r0.src, ɵngcc0.ɵɵsanitizeUrl)("alt", ctx_r0.alt);
} }
function ImageViewerComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "button", 5);
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "close");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function ImageViewerComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelement(1, "mat-spinner");
    ɵngcc0.ɵɵelementEnd();
} }
class ImageDimension {
    constructor(width = 0, height = 0) {
        this.height = height;
        this.width = width;
    }
}
class ImageViewerComponent {
    constructor(_nativeDocument, _data, _platformId, _dialogRef) {
        this._nativeDocument = _nativeDocument;
        this._data = _data;
        this._platformId = _platformId;
        this._dialogRef = _dialogRef;
        this._unsubscribeAll = new Subject();
        this._document = this._nativeDocument;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this._originalImageDimension = yield this.getOriginalImageDimension(this._data.src);
            this.setImageDimension();
            this.src = this._data.src;
            this.alt = this._data.alt;
            this.imageLoaded = true;
            // hide the close button before dialog close
            // Otherwise it apears inside image
            this._dialogRef.beforeClosed()
                .pipe(takeUntil(this._unsubscribeAll))
                .subscribe(res => {
                this.hideCloseBtn = true;
            });
        });
    }
    setImageDimension() {
        if (!isPlatformBrowser(this._platformId)) {
            return;
        }
        const windowDimension = new ImageDimension(this.percentage(this._document.body.clientWidth, 90), this.percentage(this._document.body.clientHeight, 90));
        this.calculatedImageDimension = this.calculateAspectRatioFit(this._originalImageDimension, windowDimension);
    }
    calculateAspectRatioFit(srcDimension, maxDimension) {
        if (srcDimension.height <= maxDimension.height && srcDimension.width <= maxDimension.width) {
            return srcDimension;
        }
        const ratio = Math.min(maxDimension.width / srcDimension.width, maxDimension.height / srcDimension.height);
        return new ImageDimension(srcDimension.width * ratio, srcDimension.height * ratio);
    }
    getOriginalImageDimension(imageUrl) {
        if (!imageUrl) {
            return;
        }
        return new Promise(res => {
            const img = new Image();
            img.onload = (event) => {
                const loadedImage = event.currentTarget;
                const dimension = new ImageDimension(loadedImage.width, loadedImage.height);
                return res(dimension);
            };
            img.src = imageUrl;
        });
    }
    percentage(total, percent) {
        return ((percent / 100) * total);
    }
    ngOnDestroy() {
        this._unsubscribeAll.next();
        this._unsubscribeAll.complete();
    }
}
ImageViewerComponent.ɵfac = function ImageViewerComponent_Factory(t) { return new (t || ImageViewerComponent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MAT_DIALOG_DATA), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialogRef)); };
ImageViewerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ImageViewerComponent, selectors: [["lib-image-viewer"]], hostBindings: function ImageViewerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("resize", function ImageViewerComponent_resize_HostBindingHandler($event) { return ctx.setImageDimension($event); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, decls: 4, vars: 3, consts: [[4, "ngIf", "ngIfElse"], ["class", "image-view-close-button", 4, "ngIf"], ["loaderTemplate", ""], [3, "src", "alt"], [1, "image-view-close-button"], ["mat-icon-button", "", "mat-dialog-close", ""], [1, "img-loading-spinner-container"]], template: function ImageViewerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ImageViewerComponent_figure_0_Template, 2, 6, "figure", 0);
        ɵngcc0.ɵɵtemplate(1, ImageViewerComponent_div_1_Template, 4, 0, "div", 1);
        ɵngcc0.ɵɵtemplate(2, ImageViewerComponent_ng_template_2_Template, 2, 0, "ng-template", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r2 = ɵngcc0.ɵɵreference(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.imageLoaded)("ngIfElse", _r2);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.hideCloseBtn);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.MatButton, ɵngcc1.MatDialogClose, ɵngcc4.MatIcon, ɵngcc5.MatSpinner], styles: ["figure[_ngcontent-%COMP%]{margin:0;min-height:72px;min-width:72px;padding:0}.img-loading-spinner-container[_ngcontent-%COMP%]{align-items:center;display:flex;height:150px;justify-content:center;width:150px}.image-view-close-button[_ngcontent-%COMP%]{animation:fade-in .2s linear both;animation-delay:.2s;cursor:pointer;position:fixed!important;right:-100px;top:-100px}.image-view-close-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:rgba(0,0,0,.4);color:#fff;height:72px;width:72px}@keyframes fade-in{0%{right:-100px;top:-100px}to{right:-20px;top:-20px}}  .ng-hacks-image-viewer{max-width:none!important}  .ng-hacks-image-viewer .mat-dialog-container{background:transparent;border-radius:0;box-shadow:none;overflow:hidden;padding:0}  .ng-hacks-image-viewer-backdrop{background:rgba(0,0,0,.32);cursor:zoom-out}"] });
ImageViewerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: MatDialogRef }
];
ImageViewerComponent.propDecorators = {
    setImageDimension: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerComponent, [{
        type: Component,
        args: [{
                selector: 'lib-image-viewer',
                template: "<figure *ngIf=\"imageLoaded; else loaderTemplate\">\n\n  <img\n    [src]=\"src\"\n    [alt]=\"alt\"\n    [style.width]=\"calculatedImageDimension?.width+'px'\"\n    [style.height]=\"calculatedImageDimension?.height+'px'\"\n  >\n</figure>\n\n<div class=\"image-view-close-button\" *ngIf=\"!hideCloseBtn\">\n  <button mat-icon-button mat-dialog-close>\n    <mat-icon>close</mat-icon>\n  </button>\n</div>\n\n\n<ng-template #loaderTemplate>\n  <div class=\"img-loading-spinner-container\">\n    <mat-spinner></mat-spinner>\n  </div>\n</ng-template>\n\n\n",
                styles: ["figure{margin:0;min-height:72px;min-width:72px;padding:0}.img-loading-spinner-container{align-items:center;display:flex;height:150px;justify-content:center;width:150px}.image-view-close-button{animation:fade-in .2s linear both;animation-delay:.2s;cursor:pointer;position:fixed!important;right:-100px;top:-100px}.image-view-close-button button{background-color:rgba(0,0,0,.4);color:#fff;height:72px;width:72px}@keyframes fade-in{0%{right:-100px;top:-100px}to{right:-20px;top:-20px}}::ng-deep .ng-hacks-image-viewer{max-width:none!important}::ng-deep .ng-hacks-image-viewer .mat-dialog-container{background:transparent;border-radius:0;box-shadow:none;overflow:hidden;padding:0}::ng-deep .ng-hacks-image-viewer-backdrop{background:rgba(0,0,0,.32);cursor:zoom-out}"]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [MAT_DIALOG_DATA]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc1.MatDialogRef }]; }, { setImageDimension: [{
            type: HostListener,
            args: ['window:resize', ['$event']]
        }] }); })();

class ImageViewerDirective {
    constructor(_elRef, _dialog) {
        this._elRef = _elRef;
        this._dialog = _dialog;
        if (this._elRef.nativeElement.tagName === 'IMG') {
            this._cursor = 'zoom-in';
        }
    }
    /**
     * @description Disables image viewer
     */
    set disabled(v) {
        this._disabled = v;
        if (v) {
            this._cursor = 'initial';
        }
    }
    set customSrc(v) {
        if (!v) {
            return;
        }
        this._customSrc = v;
    }
    viewImage() {
        if (this._disabled) {
            return;
        }
        this._dialog.open(ImageViewerComponent, {
            autoFocus: false,
            data: {
                src: this._customSrc || this.src,
                alt: this.alt
            },
            panelClass: 'ng-hacks-image-viewer',
            backdropClass: 'ng-hacks-image-viewer-backdrop'
        });
    }
}
ImageViewerDirective.ɵfac = function ImageViewerDirective_Factory(t) { return new (t || ImageViewerDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MatDialog)); };
ImageViewerDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ImageViewerDirective, selectors: [["", "imageViewer", ""]], hostVars: 2, hostBindings: function ImageViewerDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ImageViewerDirective_click_HostBindingHandler() { return ctx.viewImage(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("cursor", ctx._cursor);
    } }, inputs: { disabled: "disabled", customSrc: ["imageViewer", "customSrc"], src: "src", alt: "alt" } });
ImageViewerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: MatDialog }
];
ImageViewerDirective.propDecorators = {
    _cursor: [{ type: HostBinding, args: ['style.cursor',] }],
    src: [{ type: Input }],
    alt: [{ type: Input }],
    disabled: [{ type: Input, args: ['disabled',] }],
    customSrc: [{ type: Input, args: ['imageViewer',] }],
    viewImage: [{ type: HostListener, args: ['click',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerDirective, [{
        type: Directive,
        args: [{
                selector: '[imageViewer]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.MatDialog }]; }, { _cursor: [{
            type: HostBinding,
            args: ['style.cursor']
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }], customSrc: [{
            type: Input,
            args: ['imageViewer']
        }], viewImage: [{
            type: HostListener,
            args: ['click']
        }], src: [{
            type: Input
        }], alt: [{
            type: Input
        }] }); })();

class ImageViewerModule {
}
ImageViewerModule.ɵfac = function ImageViewerModule_Factory(t) { return new (t || ImageViewerModule)(); };
ImageViewerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ImageViewerModule });
ImageViewerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            MatDialogModule,
            MatProgressSpinnerModule,
            MatButtonModule,
            MatIconModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ImageViewerModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ImageViewerComponent,
                    ImageViewerDirective
                ],
                imports: [
                    CommonModule,
                    MatDialogModule,
                    MatProgressSpinnerModule,
                    MatButtonModule,
                    MatIconModule
                ],
                exports: [
                    ImageViewerDirective
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ImageViewerModule, { declarations: function () { return [ImageViewerComponent, ImageViewerDirective]; }, imports: function () { return [CommonModule,
        MatDialogModule,
        MatProgressSpinnerModule,
        MatButtonModule,
        MatIconModule]; }, exports: function () { return [ImageViewerDirective]; } }); })();

/*
 * Public API Surface of image-viewer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ImageViewerDirective, ImageViewerModule, ImageViewerComponent as ɵa };

//# sourceMappingURL=nghacks-image-viewer.js.map